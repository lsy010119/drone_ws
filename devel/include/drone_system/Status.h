// Generated by gencpp from file drone_system/Status.msg
// DO NOT EDIT!


#ifndef DRONE_SYSTEM_MESSAGE_STATUS_H
#define DRONE_SYSTEM_MESSAGE_STATUS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace drone_system
{
template <class ContainerAllocator>
struct Status_
{
  typedef Status_<ContainerAllocator> Type;

  Status_()
    : pos_n(0.0)
    , pos_e(0.0)
    , pos_d(0.0)
    , vel_n(0.0)
    , vel_e(0.0)
    , vel_d(0.0)
    , yaw_ang(0.0)
    , yaw_ang_vel(0.0)
    , connection(false)  {
    }
  Status_(const ContainerAllocator& _alloc)
    : pos_n(0.0)
    , pos_e(0.0)
    , pos_d(0.0)
    , vel_n(0.0)
    , vel_e(0.0)
    , vel_d(0.0)
    , yaw_ang(0.0)
    , yaw_ang_vel(0.0)
    , connection(false)  {
  (void)_alloc;
    }



   typedef double _pos_n_type;
  _pos_n_type pos_n;

   typedef double _pos_e_type;
  _pos_e_type pos_e;

   typedef double _pos_d_type;
  _pos_d_type pos_d;

   typedef double _vel_n_type;
  _vel_n_type vel_n;

   typedef double _vel_e_type;
  _vel_e_type vel_e;

   typedef double _vel_d_type;
  _vel_d_type vel_d;

   typedef double _yaw_ang_type;
  _yaw_ang_type yaw_ang;

   typedef double _yaw_ang_vel_type;
  _yaw_ang_vel_type yaw_ang_vel;

   typedef uint8_t _connection_type;
  _connection_type connection;





  typedef boost::shared_ptr< ::drone_system::Status_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::drone_system::Status_<ContainerAllocator> const> ConstPtr;

}; // struct Status_

typedef ::drone_system::Status_<std::allocator<void> > Status;

typedef boost::shared_ptr< ::drone_system::Status > StatusPtr;
typedef boost::shared_ptr< ::drone_system::Status const> StatusConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::drone_system::Status_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::drone_system::Status_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::drone_system::Status_<ContainerAllocator1> & lhs, const ::drone_system::Status_<ContainerAllocator2> & rhs)
{
  return lhs.pos_n == rhs.pos_n &&
    lhs.pos_e == rhs.pos_e &&
    lhs.pos_d == rhs.pos_d &&
    lhs.vel_n == rhs.vel_n &&
    lhs.vel_e == rhs.vel_e &&
    lhs.vel_d == rhs.vel_d &&
    lhs.yaw_ang == rhs.yaw_ang &&
    lhs.yaw_ang_vel == rhs.yaw_ang_vel &&
    lhs.connection == rhs.connection;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::drone_system::Status_<ContainerAllocator1> & lhs, const ::drone_system::Status_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace drone_system

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::drone_system::Status_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::drone_system::Status_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::drone_system::Status_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::drone_system::Status_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::drone_system::Status_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::drone_system::Status_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::drone_system::Status_<ContainerAllocator> >
{
  static const char* value()
  {
    return "8e5d164adbff825645eb62cf6f3d00a8";
  }

  static const char* value(const ::drone_system::Status_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x8e5d164adbff8256ULL;
  static const uint64_t static_value2 = 0x45eb62cf6f3d00a8ULL;
};

template<class ContainerAllocator>
struct DataType< ::drone_system::Status_<ContainerAllocator> >
{
  static const char* value()
  {
    return "drone_system/Status";
  }

  static const char* value(const ::drone_system::Status_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::drone_system::Status_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64 pos_n\n"
"float64 pos_e\n"
"float64 pos_d\n"
"float64 vel_n\n"
"float64 vel_e\n"
"float64 vel_d\n"
"float64 yaw_ang\n"
"float64 yaw_ang_vel\n"
"bool connection\n"
"\n"
;
  }

  static const char* value(const ::drone_system::Status_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::drone_system::Status_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.pos_n);
      stream.next(m.pos_e);
      stream.next(m.pos_d);
      stream.next(m.vel_n);
      stream.next(m.vel_e);
      stream.next(m.vel_d);
      stream.next(m.yaw_ang);
      stream.next(m.yaw_ang_vel);
      stream.next(m.connection);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Status_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::drone_system::Status_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::drone_system::Status_<ContainerAllocator>& v)
  {
    s << indent << "pos_n: ";
    Printer<double>::stream(s, indent + "  ", v.pos_n);
    s << indent << "pos_e: ";
    Printer<double>::stream(s, indent + "  ", v.pos_e);
    s << indent << "pos_d: ";
    Printer<double>::stream(s, indent + "  ", v.pos_d);
    s << indent << "vel_n: ";
    Printer<double>::stream(s, indent + "  ", v.vel_n);
    s << indent << "vel_e: ";
    Printer<double>::stream(s, indent + "  ", v.vel_e);
    s << indent << "vel_d: ";
    Printer<double>::stream(s, indent + "  ", v.vel_d);
    s << indent << "yaw_ang: ";
    Printer<double>::stream(s, indent + "  ", v.yaw_ang);
    s << indent << "yaw_ang_vel: ";
    Printer<double>::stream(s, indent + "  ", v.yaw_ang_vel);
    s << indent << "connection: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.connection);
  }
};

} // namespace message_operations
} // namespace ros

#endif // DRONE_SYSTEM_MESSAGE_STATUS_H
